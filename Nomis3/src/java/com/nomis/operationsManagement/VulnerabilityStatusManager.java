/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.nomis.operationsManagement;

import com.nomis.ovc.business.Ovc;
import com.nomis.ovc.business.VulnerabilityStatus;
import com.nomis.ovc.dao.DaoUtility;
import com.nomis.ovc.util.AppConstant;
import com.nomis.reports.utils.Indicator;
import java.util.ArrayList;
import java.util.List;
import javax.servlet.http.HttpSession;

/**
 *
 * @author smomoh
 */
public class VulnerabilityStatusManager 
{
    public int updateMainVulnerabilityStatusInformation() throws Exception
    {
        int count=0;
        DaoUtility util=new DaoUtility();
        List communityList=util.getChildEnrollmentDaoInstance().getDistinctLevel4OrganizationUnitForRecordsWithoutMainVulnerabilityStatus();
        List recordsWithoutMainVulnerabilityStatusList=null;
        if(communityList !=null && !communityList.isEmpty())
        {
            for(Object obj:communityList)
            {
                String communityCode=(String)obj;
                recordsWithoutMainVulnerabilityStatusList=util.getChildEnrollmentDaoInstance().getOvcRecordsWithoutMainVulnerabilityStatusByOrgUnit(communityCode);
                if(recordsWithoutMainVulnerabilityStatusList !=null && !recordsWithoutMainVulnerabilityStatusList.isEmpty())
                {
                    for(Object ovcObj:recordsWithoutMainVulnerabilityStatusList)
                    {
                        Ovc ovc=(Ovc)ovcObj;
                    }
                }
            }
        }
        return count;
    }
    public Ovc getOvcWithMainVulnerabilityStatus(Ovc ovc)
    {
        if(ovc !=null)
        {
            String concatenatedVulnerabilityStatus=ovc.getVulnerabilityStatusCode();
            if(concatenatedVulnerabilityStatus !=null)
            {
                if(concatenatedVulnerabilityStatus.indexOf("") !=-1)
                ovc.setMainVulnerabilityStatusCode("");
                else if(concatenatedVulnerabilityStatus.indexOf("") !=-1)
                ovc.setMainVulnerabilityStatusCode("");
            }
        }
        return ovc;
    }
    public static VulnerabilityStatus getTeenMother()
    {
        VulnerabilityStatus vs=new VulnerabilityStatus();
        //vs.setCode("18v");
        //vs.setName("Teen mother");
        return vs;
    }
    public static Indicator getVulnerabilityStatusIndicator(String vulnerabilityStatusId)
    {
        Indicator indicator=null;
        try
        {
            DaoUtility util=new DaoUtility();
            VulnerabilityStatus vs=util.getVulnerabilityStatusDaoInstance().getVulnerabilityStatus(vulnerabilityStatusId);
            if(vs !=null)
            {
                indicator=Indicator.getInstance();
                indicator.setIndicatorId(vs.getVulnerabilityStatusId());
                indicator.setIndicatorName("Number of "+vs.getVulnerabilityStatusName());
                indicator.setIndicatorType(AppConstant.OVC_TYPE);
                indicator.setIndicatorSubtype(AppConstant.VULNERABILITYSTATUS_SUBTYPE);
                indicator.setDescription("This indicator counts the number of children with vulnerability "+vs.getVulnerabilityStatusName()+" enrolled in the program");
                indicator.setMerCode("OVC_ENROLLED");
            }
        }
        catch(Exception ex)
        {
            ex.printStackTrace();
        }
        return indicator;
    }
    public static List getVulnerabilityStatusIndicators()
    {
        List vulStatusIndicatorList=new ArrayList();
        try
        {
            DaoUtility util=new DaoUtility();
            List list=util.getVulnerabilityStatusDaoInstance().getAllVulnerabilityStatus();
            if(list !=null)
            {
                VulnerabilityStatus vs=null;
                for(Object obj:list)
                {
                    vs=(VulnerabilityStatus)obj;
                    Indicator indicator=Indicator.getInstance();
                    indicator.setIndicatorId(vs.getVulnerabilityStatusId());
                    indicator.setIndicatorName("Number of "+vs.getVulnerabilityStatusName());
                    indicator.setIndicatorType(AppConstant.OVC_TYPE);
                    indicator.setIndicatorSubtype("VULNERABILITYSTATUS");
                    indicator.setDescription("This indicator counts the number of children with vulnerability "+vs.getVulnerabilityStatusName()+" enrolled in the program");
                    indicator.setMerCode("OVC_ENROLLED");
                    vulStatusIndicatorList.add(indicator);
                }
            }
        }
        catch(Exception ex)
        {
            ex.printStackTrace();
        }
        return vulStatusIndicatorList;
    }
    public static VulnerabilityStatus getVulnerabilityStatus(String statusCode)
    {
        VulnerabilityStatus vs=new VulnerabilityStatus();
        if(statusCode !=null)
        {
            try
            {
                DaoUtility util=new DaoUtility();
                vs=util.getVulnerabilityStatusDaoInstance().getVulnerabilityStatus(statusCode);
                if(vs==null)
                vs=new VulnerabilityStatus();
            }
            catch(Exception ex)
            {
                ex.printStackTrace();
            }
        }
        
        return vs;
    }
    public static String getVulnerabilityStatusName(String statusCode)
    {
        String vulnerabilityStatusName=" ";
        if(statusCode !=null)
        {
            VulnerabilityStatus vs=getVulnerabilityStatus(statusCode);
            if(vs !=null)
            vulnerabilityStatusName=vs.getVulnerabilityStatusName();
        }
        return vulnerabilityStatusName;
    }
    public static String getOtherVulnerabilityStatusNames(String statusCodes)
    {
        String vulnerabilityStatusNames=" ";
        if(statusCodes !=null)
        {
            String[] statusCodesArray=statusCodes.split(",");
            if(statusCodesArray !=null && statusCodesArray.length>0)
            {
                VulnerabilityStatus vs=null;
                for(int i=0; i<statusCodesArray.length; i++)
                {
                    vs=getVulnerabilityStatus(statusCodesArray[i]);
                    if(vs !=null)
                    {
                        if(i==0)
                        vulnerabilityStatusNames+=vs.getVulnerabilityStatusName();
                        else
                        vulnerabilityStatusNames+=","+vs.getVulnerabilityStatusName();
                    }
                }
            }
        }
        return vulnerabilityStatusNames;
    }
    public static void setMainVulnerabilityStatusForDisplay(HttpSession session) throws Exception
    {
        
        List finalList=new ArrayList();
        List subList=new ArrayList();
        String tableHtml="";
        String styleId="";
        String styleId2="";
        try
        {
            int j=0;
            DaoUtility util=new DaoUtility();
            List list=util.getVulnerabilityStatusDaoInstance().getMainVulnerabilityStatus();
            for(int i=0; i<list.size(); i++)
            {
                //subList=new ArrayList();
                //j=i;
                VulnerabilityStatus vs=(VulnerabilityStatus)list.get(i);
                finalList.add(vs);
                //j=i+1;
                
                
                //finalList.add(subList);
            }
            
        }
        catch(Exception ex)
        {
            ex.printStackTrace();
        }
        session.setAttribute("mainVulnerabilityStatusList", finalList);
        //session.setAttribute("eligibilityCriteria", tableHtml);
        
    }
    public static void setOtherVulnerabilityStatusForDisplay(HttpSession session,String vsToRemove) throws Exception
    {
        
        List finalList=new ArrayList();
        List subList=new ArrayList();
        String tableHtml="";
        String styleId="";
        String styleId2="";
        try
        {
            int j=0;
            DaoUtility util=new DaoUtility();
            List list=util.getVulnerabilityStatusDaoInstance().getMainVulnerabilityStatus();
            //getLegacyVulnerabilityStatus();
            for(int i=0; i<list.size(); i+=2)
            {
                subList=new ArrayList();
                j=i;
                VulnerabilityStatus vs=(VulnerabilityStatus)list.get(j);
                if(vsToRemove !=null)
                {
                    if(!vsToRemove.equalsIgnoreCase(vs.getVulnerabilityStatusId()))
                    subList.add(vs);
                }
                
                j=i+1;
                if(j<list.size())
                {
                    VulnerabilityStatus vs2=(VulnerabilityStatus)list.get(j);
                    if(vsToRemove !=null)
                    {
                        if(vsToRemove.equalsIgnoreCase(vs2.getVulnerabilityStatusId()))
                        continue;
                    }
                    subList.add(vs2);
                }
                
                finalList.add(subList);
            }
            
        }
        catch(Exception ex)
        {
            ex.printStackTrace();
        }
        session.setAttribute("otherVulnerabilityStatusList", finalList);
        //session.setAttribute("eligibilityCriteria", tableHtml);
        
    }
    public static void setVulnerabilityStatusForLegacyForm(HttpSession session) throws Exception
    {
        
        List finalList=new ArrayList();
        List subList=new ArrayList();
        String tableHtml="";
        String styleId="";
        String styleId2="";
        try
        {
            int j=0;
            DaoUtility util=new DaoUtility();
            List list=util.getVulnerabilityStatusDaoInstance().getMainVulnerabilityStatus();
            for(int i=0; i<list.size(); i+=2)
            {
                subList=new ArrayList();
                j=i;
                VulnerabilityStatus vs=(VulnerabilityStatus)list.get(j);
                subList.add(vs);
                j=i+1;
                if(j<list.size())
                {
                    VulnerabilityStatus vs2=(VulnerabilityStatus)list.get(j);
                    subList.add(vs2);
                }
                
                finalList.add(subList);
            }
            
        }
        catch(Exception ex)
        {
            ex.printStackTrace();
        }
        session.setAttribute("legacyVulnerabilityStatusList", finalList);
        //session.setAttribute("eligibilityCriteria", tableHtml);
        
    }
}
